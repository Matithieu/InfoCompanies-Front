/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/autocomplete/cities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteCitiesByNames']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/city': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteCitiesByName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/city/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteCitiesByIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/industrySector': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteIndustrySectorsByName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/industrySector/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteIndustrySectorsByIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/industrySectors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteIndustrySectorsByNames']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/legalForm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteLegalFormsByName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/legalForm/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteLegalFormsByIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/legalForms': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteLegalFormsByNames']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/region': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteRegionsByName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/region/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteRegionsByIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/autocomplete/regions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['autocompleteRegionsByNames']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/companies-status/update-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['updateStatus']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/filter-by-parameters': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['getCompaniesByFilters']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/get-by-id/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    get: operations['getCompanyById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/get-seen-by-user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getCompaniesSeenByUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/landing-filter': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getCompaniesOnLandingByFilters']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/random-unseen': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getRandomUnseenCompanies']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/scrap': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['scrapCompany']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/company/search-by-name': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['searchCompaniesByName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/completeOnboarding': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['completeOnboarding']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/leader/get-by-first-and-last-name': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getLeadersByName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/leader/get-by-id/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    get: operations['getLeaderById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/leader/get-by-siren/{siren}': {
    parameters: {
      query?: never
      header?: never
      path: {
        siren: string
      }
      cookie?: never
    }
    get: operations['getLeaderBySiren']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/stripe/subscriptions/trial': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['newSubscriptionWithTrial']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/stripe/webhook': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['handleStripeWebhook']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/update-user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['updateUser']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    City: {
      /** Format: int32 */
      id: number
      name: string
    }
    CompanyDetails: {
      city: string
      companyName: string
      /** Format: int32 */
      id: number
      industrySector: string
      region: string
    }
    CompanyDTO: {
      address: string
      apeCode: string
      apeLabel: string
      city: string
      companyCategory: string
      companyName: string
      contact: components['schemas']['Contact']
      /** Format: date */
      dateCreation: string
      department: string
      departmentNumber: string
      /** Format: date */
      deregistrationDate: string
      financialPeriods: components['schemas']['FinancialPeriodDTO'][]
      /** Format: int32 */
      id: number
      industrySector: string
      /** Format: date */
      lastProcessingDate: string
      legalForm: string
      nicNumber: string
      /** Format: int32 */
      numberOfEmployee: number
      postalCode: string
      region: string
      /** Format: date */
      registrationDate: string
      reviews: {
        [key: string]: Record<string, never>
      }
      schedule: string
      /** Format: date */
      scrapingDate: string
      sirenNumber: string
      socialMedia: components['schemas']['SocialMedia']
      tradeName: string
    }
    CompanyDtoWithStatusDTO: {
      companyDTO: components['schemas']['CompanyDTO']
      userCompanyStatus: components['schemas']['UserCompanyStatus']
    }
    CompanyFilterRequest: {
      cityNames: string[]
      contacts: components['schemas']['Contact']
      industrySectorNames: string[]
      isCompanySeen: boolean
      legalFormNames: string[]
      numberOfEmployeeFilter: components['schemas']['NumberOfEmployeeFilter']
      /** Format: int32 */
      page: number
      regionNames: string[]
      /** Format: int32 */
      size: number
      socials: components['schemas']['SocialMedia']
    }
    Contact: {
      email: string
      phoneNumber: string
      website: string
    } | null
    EntityTag: {
      value: string
      weak: boolean
    }
    FinancialPeriodDTO: {
      /** Format: date */
      closingDate: string
      /** @enum {string} */
      period: 'P1' | 'P2' | 'P3'
      /** Format: double */
      revenue: number
      /** Format: double */
      turnover: number
      /** @enum {string} */
      year: 'Y2018' | 'Y2019' | 'Y2020' | 'Y2021' | 'Y2022' | 'Y2023'
    }
    IndustrySector: {
      /** Format: int32 */
      id: number
      name: string
    }
    Leader: {
      companyName: string
      eventName: string
      firstName: string
      gestionNumber: string
      /** Format: int32 */
      id: number
      idData: string
      lastName: string
      legalForm: string
      pseudo: string
      role: string
      siren: string
      type: string
      usageName: string
    }
    LegalForm: {
      /** Format: int32 */
      id: number
      name: string
    }
    Link: {
      params: {
        [key: string]: string
      }
      rel: string
      rels: string[]
      title: string
      type: string
      /** Format: uri */
      uri: string
      uriBuilder: components['schemas']['UriBuilder']
    }
    MediaType: {
      parameters: {
        [key: string]: string
      }
      subtype: string
      type: string
      wildcardSubtype: boolean
      wildcardType: boolean
    }
    NewCookie: {
      comment: string
      domain: string
      /** Format: date-time */
      expiry: string
      httpOnly: boolean
      /** Format: int32 */
      maxAge: number
      name: string
      path: string
      /** @enum {string} */
      sameSite: 'NONE' | 'LAX' | 'STRICT'
      secure: boolean
      value: string
      /** Format: int32 */
      version: number
    }
    NumberOfEmployeeFilter: {
      /** Format: int32 */
      numberOfEmployee: number
      /** @enum {string} */
      signComparator: '<' | '>' | '='
    } | null
    PageableObject: {
      /** Format: int64 */
      offset: number
      paged: boolean
      /** Format: int32 */
      pageNumber: number
      /** Format: int32 */
      pageSize: number
      sort: components['schemas']['SortObject'][]
      unpaged: boolean
    }
    PageCompanyDetails: {
      content: components['schemas']['CompanyDetails'][]
      empty: boolean
      first: boolean
      last: boolean
      /** Format: int32 */
      number: number
      /** Format: int32 */
      numberOfElements: number
      pageable: components['schemas']['PageableObject']
      /** Format: int32 */
      size: number
      sort: components['schemas']['SortObject'][]
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      totalPages: number
    }
    PageCompanyDTO: {
      content: components['schemas']['CompanyDTO'][]
      empty: boolean
      first: boolean
      last: boolean
      /** Format: int32 */
      number: number
      /** Format: int32 */
      numberOfElements: number
      pageable: components['schemas']['PageableObject']
      /** Format: int32 */
      size: number
      sort: components['schemas']['SortObject'][]
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      totalPages: number
    }
    PageCompanyDtoWithStatusDTO: {
      content: components['schemas']['CompanyDtoWithStatusDTO'][]
      empty: boolean
      first: boolean
      last: boolean
      /** Format: int32 */
      number: number
      /** Format: int32 */
      numberOfElements: number
      pageable: components['schemas']['PageableObject']
      /** Format: int32 */
      size: number
      sort: components['schemas']['SortObject'][]
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      totalPages: number
    }
    PageLeader: {
      content: components['schemas']['Leader'][]
      empty: boolean
      first: boolean
      last: boolean
      /** Format: int32 */
      number: number
      /** Format: int32 */
      numberOfElements: number
      pageable: components['schemas']['PageableObject']
      /** Format: int32 */
      size: number
      sort: components['schemas']['SortObject'][]
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      totalPages: number
    }
    Region: {
      /** Format: int32 */
      id: number
      name: string
    }
    Response: {
      allowedMethods: string[]
      closed: boolean
      cookies: {
        [key: string]: components['schemas']['NewCookie']
      }
      /** Format: date-time */
      date: string
      entity: Record<string, never>
      entityTag: components['schemas']['EntityTag']
      headers: {
        empty: boolean
      } & {
        [key: string]: Record<string, never>[]
      }
      language: {
        country: string
        displayCountry: string
        displayLanguage: string
        displayName: string
        displayScript: string
        displayVariant: string
        extensionKeys: string[]
        iso3Country: string
        iso3Language: string
        language: string
        script: string
        unicodeLocaleAttributes: string[]
        unicodeLocaleKeys: string[]
        variant: string
      }
      /** Format: date-time */
      lastModified: string
      /** Format: int32 */
      length: number
      links: components['schemas']['Link'][]
      /** Format: uri */
      location: string
      mediaType: components['schemas']['MediaType']
      metadata: {
        empty: boolean
      } & {
        [key: string]: Record<string, never>[]
      }
      /** Format: int32 */
      status: number
      statusInfo: components['schemas']['StatusType']
      stringHeaders: {
        empty: boolean
      } & {
        [key: string]: string[]
      }
    }
    SocialMedia: {
      facebook: string
      instagram: string
      linkedin: string
      twitter: string
      youtube: string
    } | null
    SortObject: {
      ascending: boolean
      direction: string
      ignoreCase: boolean
      nullHandling: string
      property: string
    }
    StatusType: {
      /** @enum {string} */
      family:
        | 'INFORMATIONAL'
        | 'SUCCESSFUL'
        | 'REDIRECTION'
        | 'CLIENT_ERROR'
        | 'SERVER_ERROR'
        | 'OTHER'
      reasonPhrase: string
      /** Format: int32 */
      statusCode: number
    }
    UriBuilder: Record<string, never>
    User: {
      country: string
      email: string
      firstName: string
      hasCompletedOnboarding: boolean
      id: string
      lastName: string
      locality: string
      password: string
      phone: string
      postalCode: string
      region: string
      street: string
      /** @enum {string} */
      tier: 'FREE' | 'TIER1' | 'TIER2' | 'ENTERPRISE' | 'UNLIMITED'
      userName: string
      verified: boolean
    }
    UserCompanyStatus: {
      /** Format: int32 */
      companyId: number
      /** Format: int32 */
      id: number
      /** @enum {string} */
      status: 'NOT_DONE' | 'TO_DO' | 'DONE'
      userId: string
    } | null
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  autocompleteCitiesByNames: {
    parameters: {
      query: {
        query: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['City'][]
        }
      }
    }
  }
  autocompleteCitiesByName: {
    parameters: {
      query: {
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['City'][]
        }
      }
    }
  }
  autocompleteCitiesByIds: {
    parameters: {
      query: {
        query: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['City'][]
        }
      }
    }
  }
  autocompleteIndustrySectorsByName: {
    parameters: {
      query: {
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['IndustrySector'][]
        }
      }
    }
  }
  autocompleteIndustrySectorsByIds: {
    parameters: {
      query: {
        query: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['IndustrySector'][]
        }
      }
    }
  }
  autocompleteIndustrySectorsByNames: {
    parameters: {
      query: {
        query: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['IndustrySector'][]
        }
      }
    }
  }
  autocompleteLegalFormsByName: {
    parameters: {
      query: {
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['LegalForm'][]
        }
      }
    }
  }
  autocompleteLegalFormsByIds: {
    parameters: {
      query: {
        query: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['LegalForm'][]
        }
      }
    }
  }
  autocompleteLegalFormsByNames: {
    parameters: {
      query: {
        query: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['LegalForm'][]
        }
      }
    }
  }
  autocompleteRegionsByName: {
    parameters: {
      query: {
        query: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Region'][]
        }
      }
    }
  }
  autocompleteRegionsByIds: {
    parameters: {
      query: {
        query: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Region'][]
        }
      }
    }
  }
  autocompleteRegionsByNames: {
    parameters: {
      query: {
        query: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Region'][]
        }
      }
    }
  }
  updateStatus: {
    parameters: {
      query: {
        companyId: number
        status: 'NOT_DONE' | 'TO_DO' | 'DONE'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['UserCompanyStatus']
        }
      }
    }
  }
  getCompaniesByFilters: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CompanyFilterRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageCompanyDtoWithStatusDTO']
        }
      }
    }
  }
  getCompanyById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CompanyDtoWithStatusDTO']
        }
      }
    }
  }
  getCompaniesSeenByUser: {
    parameters: {
      query?: {
        page?: number
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageCompanyDtoWithStatusDTO']
        }
      }
    }
  }
  getCompaniesOnLandingByFilters: {
    parameters: {
      query?: {
        cityNames?: string[]
        industrySectorNames?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageCompanyDTO']
        }
      }
    }
  }
  getRandomUnseenCompanies: {
    parameters: {
      query?: {
        page?: number
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageCompanyDtoWithStatusDTO']
        }
      }
    }
  }
  scrapCompany: {
    parameters: {
      query: {
        companyId: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CompanyDTO']
        }
      }
    }
  }
  searchCompaniesByName: {
    parameters: {
      query: {
        companyName: string
        page?: number
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageCompanyDetails']
        }
      }
    }
  }
  completeOnboarding: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Response']
        }
      }
    }
  }
  getLeadersByName: {
    parameters: {
      query: {
        firstName: string
        lastName: string
        page?: number
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageLeader']
        }
      }
    }
  }
  getLeaderById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Leader']
        }
      }
    }
  }
  getLeaderBySiren: {
    parameters: {
      query?: never
      header?: never
      path: {
        siren: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Leader'][]
        }
      }
    }
  }
  newSubscriptionWithTrial: {
    parameters: {
      query?: never
      header: {
        'X-priceId': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  handleStripeWebhook: {
    parameters: {
      query?: never
      header: {
        'Stripe-Signature': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  updateUser: {
    parameters: {
      query: {
        user: components['schemas']['User']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Response']
        }
      }
    }
  }
  getUser: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['User']
        }
      }
    }
  }
}
export enum ApiPaths {
  updateUser = '/v1/update-user',
  handleStripeWebhook = '/v1/stripe/webhook',
  newSubscriptionWithTrial = '/v1/stripe/subscriptions/trial',
  completeOnboarding = '/v1/completeOnboarding',
  getCompaniesByFilters = '/v1/company/filter-by-parameters',
  updateStatus = '/v1/companies-status/update-status',
  getUser = '/v1/user',
  getLeaderBySiren = '/v1/leader/get-by-siren/{siren}',
  getLeaderById = '/v1/leader/get-by-id/{id}',
  getLeadersByName = '/v1/leader/get-by-first-and-last-name',
  searchCompaniesByName = '/v1/company/search-by-name',
  scrapCompany = '/v1/company/scrap',
  getRandomUnseenCompanies = '/v1/company/random-unseen',
  getCompaniesOnLandingByFilters = '/v1/company/landing-filter',
  getCompaniesSeenByUser = '/v1/company/get-seen-by-user',
  getCompanyById = '/v1/company/get-by-id/{id}',
  autocompleteRegionsByNames = '/v1/autocomplete/regions',
  autocompleteRegionsByName = '/v1/autocomplete/region',
  autocompleteRegionsByIds = '/v1/autocomplete/region/ids',
  autocompleteLegalFormsByNames = '/v1/autocomplete/legalForms',
  autocompleteLegalFormsByName = '/v1/autocomplete/legalForm',
  autocompleteLegalFormsByIds = '/v1/autocomplete/legalForm/ids',
  autocompleteIndustrySectorsByNames = '/v1/autocomplete/industrySectors',
  autocompleteIndustrySectorsByName = '/v1/autocomplete/industrySector',
  autocompleteIndustrySectorsByIds = '/v1/autocomplete/industrySector/ids',
  autocompleteCitiesByName = '/v1/autocomplete/city',
  autocompleteCitiesByIds = '/v1/autocomplete/city/ids',
  autocompleteCitiesByNames = '/v1/autocomplete/cities',
}
